this is the complete code of my c# project including my nUnit testing four of the 19 tests are not passing please help me fix them

Program.cs

public class Program
{
    static void Main(string[] args)
    {
        Console.WriteLine("Hello, World!");
    }
}

Player.cs

public class Player : GameObject
{
    private Inventory _inventory;
    public Player(string name, string desc) :
        base(new string[] { "me", "inventory" }, name, desc)
    {
        _inventory = new Inventory();
    }
    public GameObject Locate(string id)
    {
        if (AreYou(id))
        {
            return this;
        }
        return _inventory.Fetch(id);
    }
    public override string FullDescription
    {
        get
        {
            return $"{Name}, you are carrying:\n" + _inventory.ItemList;
        }
    }
    public Inventory Inventory
    {
        get => _inventory;
    }
}

Item.cs
public class Item : GameObject
{
    public Item(string[] idents, string name, string desc) : base(idents, name, desc)
    {
    }
}

Inventory.cs

public class Inventory
{
    private List<Item> _items;

    public Inventory()
    {
        _items = new List<Item>();
    }
    public bool HasItem(string id)
    {
        foreach (Item i in _items)
        {
            if (i.AreYou(id))
            {
                return true;
            }
        }
        return false;
    }

    public void Put(Item itm)
    {
        _items.Add(itm);
    }
    public Item Take(string id)
    {
        Item takeitem = this.Fetch(id);
        _items.Remove(takeitem);
        return takeitem;
    }
    public Item Fetch(string id)
    {
        foreach (Item i in _items)
        {
            if (i.AreYou(id))
            {
                return i;
            }
        }
        return null;
    }

    public string ItemList
    {
        get
        {
            string listitm = "";
            foreach (Item i in _items)
            {
                listitm = listitm + i.ShortDescription + "\n";
            }
            return listitm;
        }
    }
}

IdentifiableObject.cs

 public class IdentifiableObject
 {
     private readonly List<string> _identifiers;

     public IdentifiableObject(string[] initialIdentifiers)
     {
         // The list of identifiers initialised here.
         _identifiers = new List<string>(initialIdentifiers);
     }

     public bool AreYou(string identifier)
     {
         return _identifiers.Contains(identifier, StringComparer.OrdinalIgnoreCase);
     }

     public string FirstId()
     {
         
         if (_identifiers.Any())
         {
             return _identifiers.First();
         }
         else
         {
             return string.Empty;
         }
     }

     public void AddIdentifier(string identifier)
     {
        
         _identifiers.Add(identifier.ToLower());
     }

     public void PrivilegeEscalation(string inputPin, string studentId, string tutorialId)
     {
    
         if (inputPin == studentId.Substring(studentId.Length - 4))

             _identifiers[0] = tutorialId;
         }
     }

     public IReadOnlyList<string> GetIdentifiers()
     {
         return _identifiers.AsReadOnly();
     }

     public void PrivilegeEscalation(string studentId, string tutorialId)
     {
         throw new NotImplementedException();
     }
 }

GameObject.cs

public class GameObject : IdentifiableObject
{
    private string _description;
    private string _name;

    public GameObject(string[] ids, string name, string desc) : base(ids)
    {
        _name = name;
        _description = desc;
    }

    public string Name
    {
        get { return _name; }
    }

    
    virtual public string FullDescription
    {
        get { return _description; }
    }

    public string ShortDescription
    {
        get { return $"{_name} ({FirstId})"; }
    }
}

PlayerTest.cs

public class PlayerTest
{
    Player player = new Player("Raghu", "Swinburne Student");
    Item shovel = new Item(new string[] { "shovel" }, "a shovel", "This is a shovel");
    Item sword = new Item(new string[] { "sword" }, "a sword", "This is a Sword");
    [SetUp]
    public void Setup()
    {
    }
    [Test]
    public void TestPlayerIdentifiable()
    {
        Assert.IsTrue(player.AreYou("me") && player.AreYou("inventory"));
    }
    [Test]
    public void TestPlayerLocateItems()
    {
        var result = false;
        player.Inventory.Put(sword);
        var itemsLocated = player.Locate("sword");
        if (sword == itemsLocated)
        {
            result = true;
        }
        Assert.IsTrue(result);
    }
    [Test]
    public void TestPlayerLocateItself()
    {
        var me = player.Locate("me");
        var inv = player.Locate("inventory");
        var result = false;

        if (me == player || inv == player)
        {
            result = true;
        }
        Assert.IsTrue(result);
    }
    [Test]
    public void TestPlayerLocateNothing()
    {
        var me = player.Locate("Hi");
        Assert.IsNull(me);
    }
    [Test]
    public void TestPlayerFullDescription()
    {
        player.Inventory.Put(sword);
        player.Inventory.Put(shovel);
        string expected = "Raghu, you are carrying:\na sword (sword)\na shovel (shovel)\n";
        Assert.AreEqual(player.FullDescription, expected);
    }
}

ItemTest.cs

public class ItemTest
{
    Item shovel = new Item(new string[] { "shovel" }, "a shovel", "This is a shovel");
    Item sword = new Item(new string[] { "sword" }, "a sword", "This is a sword");

    [SetUp]
    public void Setup()
    {
    }
    [Test]
    public void TestItemIdentifiable()
    {
        var result = shovel.AreYou("sword");
        Assert.IsFalse(result);

        var result2 = shovel.AreYou("shovel");
        Assert.IsTrue(result2);
    }
    [Test]
    public void TestShortDescription()
    {
        Assert.AreEqual("a shovel (shovel)", shovel.ShortDescription);
        //Assert.AreEqual(shovel.ShortDescription, "a shovel (shovel)");
        //Assert.AreNotEqual(shovel.ShortDescription, "This is a shovel");
    }
    [Test]
    public void TestFullDescription()
    {
        Assert.AreEqual(shovel.FullDescription, "This is a shovel");
        Assert.AreNotEqual(shovel.FullDescription, "a shovel (shovel)");

    }
}

InventoryTest.cs
public class InventoryTest
{
    Item shovel = new Item(new string[] { "shovel" }, "a shovel", "This is a shovel");
    Item sword = new Item(new string[] { "sword" }, "a sword", "This is a sword");

    [SetUp]
    public void Setup()
    {
        // No setup needed for now
    }

    [Test]
    public void TestFindItem()
    {
        Inventory i = new Inventory();
        i.Put(shovel);
        Assert.IsTrue(i.HasItem(shovel.FirstId())); // Corrected method call
    }
    [Test]
    public void TestFetchItems()
    {
        Inventory i = new Inventory();
        i.Put(shovel);
        Item fetchItem = i.Fetch(shovel.FirstId());

        Assert.IsTrue(fetchItem == shovel);
        Assert.IsTrue(i.HasItem(shovel.FirstId()));
    }
    [Test]
    public void TestTakenItem()
    {
        Inventory i = new Inventory();
        i.Put(shovel);
        i.Take(shovel.FirstId());
        Assert.IsFalse(i.HasItem(shovel.FirstId()));
    }
    [Test]
    public void TestItemList()
    {
        Inventory i = new Inventory();
        i.Put(shovel);
        i.Put(sword);
        Assert.IsTrue(i.HasItem(shovel.FirstId()));
        Assert.IsTrue(i.HasItem(sword.FirstId()));

        string expctOutput = "a shovel (shovel)\n" + "a sword (sword)\n";
        Assert.AreEqual(i.ItemList, expctOutput);
    }
}

IdentifiableObjectTest.cs

public class IdentifiableObjectTest
{
    private IdentifiableObject myObject;

    [SetUp]
    public void Setup()
    {
        // Initialize your test object here
        string[] initialIdentifiers = { "john", "student", "doe" };
        myObject = new IdentifiableObject(initialIdentifiers);
    }

    [Test]
    public void AreYou_ShouldReturnTrue_WhenIdentifierExists()
    {
        // Act
        bool result1 = myObject.AreYou("john");
        bool result2 = myObject.AreYou("student");

        // Assert
        Assert.IsTrue(result1, "'john' should be identified.");
        Assert.IsTrue(result2, "'student' should be identified.");
    }

    [Test]
    public void AreYou_ShouldReturnFalse_WhenIdentifierDoesNotExist()
    {
        // Act
        bool result = myObject.AreYou("smith");

        // Assert
        Assert.IsFalse(result, "'smith' should not be identified.");
    }

    [Test]
    public void AreYou_ShouldBeCaseInsensitive()
    {
        // Act
        bool result1 = myObject.AreYou("john");
        bool result2 = myObject.AreYou("STUDENT");

        // Assert
        Assert.IsTrue(result1, "'john' should be identified.");
        Assert.IsTrue(result2, "'STUDENT' should be identified.");
    }

    [Test]
    public void FirstId_ShouldReturnFirstIdentifier()
    {
        // Act
        string firstId = myObject.FirstId();

        // Assert
        Assert.AreEqual("john", firstId);
    }

    [Test]
    public void FirstId_ShouldReturnEmptyStringWhenNoIdentifiers()
    {
        // Arrange
        var emptyObject = new IdentifiableObject(new string[0]);

        // Act
        string firstId = emptyObject.FirstId();

        // Assert
        Assert.AreEqual(string.Empty, firstId);
    }

    [Test]
    public void AddIdentifier_ShouldAddNewIdentifier()
    {
        // Arrange
        string[] initialIdentifiers = { "Seekers", "Athol", "Keith", "Bruce" };
        var myObject = new IdentifiableObject(initialIdentifiers);

        // Act
        myObject.AddIdentifier("Mary");

        // Assert
        Assert.IsTrue(myObject.AreYou("Seekers"));
        Assert.IsTrue(myObject.AreYou("Keith"));
        Assert.IsTrue(myObject.AreYou("Mary"));
    }

    [Test]
    public void PrivilegeEscalation_ShouldReplaceFirstIdentifier()
    {

        string studentId = "2797"; // Your student ID
        string tutorialId = "COS20007"; // Your tutorial ID

        // Act
        myObject.PrivilegeEscalation("2797", studentId, tutorialId);

        // Assert
        Assert.AreEqual(tutorialId, myObject.FirstId());
    }
}

of these three tests are now working

public string ItemList()

public void TestShortDescription()

public void TestPlayerFullDescription()